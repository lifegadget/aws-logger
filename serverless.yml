service: serverless-event
package:
  include:
    - "lib/*"
    - "node_modules/**"
  exclude:
    - "*.mp3"
    - "test/*"
    - "src/*"
    - ".git/**"

custom:
  stage: "${opt:stage, self:provider.stage}"

provider:
  name: aws
  runtime: nodejs4.3
  profile: serverless
  stage: dev
  region: eu-west-1
  environment: ${file(env.yml):${self:custom.stage}}

functions:
  receiver:
    description: Receives events from clients and place into an SQS queue.
    handler: lib/receiver.handler
    role: 
      - defaultRole
      - queuePublisher
    events:
      - http: POST logger

  event-manager:
    description: Checks the event queue for message depth and then invokes an appropriate number of "processors" to drain the queue.
    handler: lib/event-manager.handler
    role: 
      - defaultRole
      - functionInvoker
      - queueMeta
    events:
      - schedule:
          rate: rate(1 minute)
          enabled: true

  processor:
    description: Takes events out of the queue and structures them into useful JSON blobs in S3. When the update to an S3 bucket is completed it will also send an SNS message to any interested parties.
    handler: lib/processor.handler
    role: 
      - defaultRole
      - queueWorker
      - s3Contributor

  aggregator:
    description: Rolls up transactional entries into aggregates (including daily, monthly, user, etc).
    handler: lib/aggregator.handler
    role: 
      - defaultRole
      - functionInvoker
      - s3Contributor
    events:
      - schedule:
          rate: rate(60 minutes)
          enabled: true

resources:
  Resources:
    defaultRole: 
      Type: AWS::IAM::Role
      Properties:
        Path: /serverless-event
        RoleName: ServerlessEventDefaultRole
        AssumeRolePolicyDocument:
          Version: '2017'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: ServerlessEventLogging
            PolicyDocument:
              Version: '2017'
              Statement:
                - Effect: Allow # note that these rights are given in the default policy and are required if you want logs out of your lambda(s)
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: arn:aws:logs:${self:provider.region}:947418478752:log-group:/aws/lambda/*:*:*
                -  Effect: "Allow"
                   Action:
                     - "s3:PutObject"
                   Resource:
                     Fn::Join:
                       - ""
                       - - "arn:aws:s3:::"
                         - "Ref" : "ServerlessDeploymentBucket"      

    functionInvoker:
      Type: AWS::IAM::Role
      Policies:
        - PolicyName: ServerlessEventInvoker
          PolicyDocument:
            Version: '2017'
            Statements:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
    
    queueMeta:
      Type: AWS::IAM::Role
      Policies:
        - PolicyName: ServerlessEventQueueMeta
          PolicyDocument:
            Version: '2017'
            Statements:
              - Effect: Allow
                Action:
                  - sqs:GetQueueAttributes
                  - sqs:GetQueueUrl
                  - sqs:ListQueues
                Resource: '*'

    queueWorker:
      Type: AWS::IAM::Role
      Policies:
        - PolicyName: ServerlessEventQueueWorker
          PolicyDocument:
            Version: '2017'
            Statements:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:DeleteMessageBatch
                Resource: '*'

    queuePublisher:
      Type: AWS::IAM::Role
      Policies:
        - PolicyName: ServerlessEventQueuePublisher
          PolicyDocument:
            Version: '2017'
            Statements:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                  - sqs:SendMessageBatch
                  - sqs:SetQueueAttributes
                Resource: '*'

    s3Contributor:
      Type: AWS::IAM::Role
      Policies:
        - PolicyName: ServerlessEventS3Contributor
          PolicyDocument:
            Version: '2017'
            Statements:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListAllMyBuckets
                Resource: '*'  

    EventsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: serverless-event



#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"