{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket"
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "serverless-event",
              "dev",
              "eu-west-1",
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "IamPolicyLambdaExecution": {
      "Type": "AWS::IAM::Policy",
      "DependsOn": [
        "IamRoleLambdaExecution"
      ],
      "Properties": {
        "PolicyName": {
          "Fn::Join": [
            "-",
            [
              "dev",
              "serverless-event",
              "lambda"
            ]
          ]
        },
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream"
              ],
              "Resource": "arn:aws:logs:eu-west-1:*:*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "logs:PutLogEvents"
              ],
              "Resource": "arn:aws:logs:eu-west-1:*:*"
            }
          ]
        },
        "Roles": [
          {
            "Ref": "IamRoleLambdaExecution"
          }
        ]
      }
    },
    "ReceiverLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/serverless-event/dev/1481806587897-2016-12-15T12:56:27.897Z/serverless-event.zip"
        },
        "FunctionName": "serverless-event-dev-receiver",
        "Handler": "lib/receiver.handler",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs4.3",
        "Timeout": 6,
        "Description": "Receives events from clients and place into an SQS queue.",
        "Environment": {
          "Variables": {
            "STAGE": "dev"
          }
        }
      },
      "DependsOn": [
        "IamPolicyLambdaExecution",
        "IamRoleLambdaExecution"
      ]
    },
    "ReceiverLambdaVersioniGNubuVlHKXOeskJRQbIw8wGJBgw60FC5XeBoFeyz0": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ReceiverLambdaFunction"
        },
        "CodeSha256": "iGNubuVlHKXOeskJRQbIw8wGJBgw60FC5XeBoFey+z0="
      }
    },
    "EventDashmanagerLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/serverless-event/dev/1481806587897-2016-12-15T12:56:27.897Z/serverless-event.zip"
        },
        "FunctionName": "serverless-event-dev-event-manager",
        "Handler": "lib/event-manager.handler",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs4.3",
        "Timeout": 6,
        "Description": "Checks the event queue for message depth and then invokes an appropriate number of \"processors\" to drain the queue.",
        "Environment": {
          "Variables": {
            "STAGE": "dev"
          }
        }
      },
      "DependsOn": [
        "IamPolicyLambdaExecution",
        "IamRoleLambdaExecution"
      ]
    },
    "EventDashmanagerLambdaVersioniGNubuVlHKXOeskJRQbIw8wGJBgw60FC5XeBoFeyz0": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "EventDashmanagerLambdaFunction"
        },
        "CodeSha256": "iGNubuVlHKXOeskJRQbIw8wGJBgw60FC5XeBoFey+z0="
      }
    },
    "ProcessorLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/serverless-event/dev/1481806587897-2016-12-15T12:56:27.897Z/serverless-event.zip"
        },
        "FunctionName": "serverless-event-dev-processor",
        "Handler": "lib/processor.handler",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs4.3",
        "Timeout": 6,
        "Description": "Takes events out of the queue and structures them into useful JSON blobs in S3. When the update to an S3 bucket is completed it will also send an SNS message to any interested parties.",
        "Environment": {
          "Variables": {
            "STAGE": "dev"
          }
        }
      },
      "DependsOn": [
        "IamPolicyLambdaExecution",
        "IamRoleLambdaExecution"
      ]
    },
    "ProcessorLambdaVersioniGNubuVlHKXOeskJRQbIw8wGJBgw60FC5XeBoFeyz0": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ProcessorLambdaFunction"
        },
        "CodeSha256": "iGNubuVlHKXOeskJRQbIw8wGJBgw60FC5XeBoFey+z0="
      }
    },
    "AggregatorLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/serverless-event/dev/1481806587897-2016-12-15T12:56:27.897Z/serverless-event.zip"
        },
        "FunctionName": "serverless-event-dev-aggregator",
        "Handler": "lib/aggregator.handler",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs4.3",
        "Timeout": 6,
        "Description": "Rolls up transactional entries into aggregates (including daily, monthly, user, etc).",
        "Environment": {
          "Variables": {
            "STAGE": "dev"
          }
        }
      },
      "DependsOn": [
        "IamPolicyLambdaExecution",
        "IamRoleLambdaExecution"
      ]
    },
    "AggregatorLambdaVersioniGNubuVlHKXOeskJRQbIw8wGJBgw60FC5XeBoFeyz0": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AggregatorLambdaFunction"
        },
        "CodeSha256": "iGNubuVlHKXOeskJRQbIw8wGJBgw60FC5XeBoFey+z0="
      }
    },
    "EventDashmanagerEventsRuleSchedule1": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": "rate(1 minute)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "EventDashmanagerLambdaFunction",
                "Arn"
              ]
            },
            "Id": "event-managerSchedule"
          }
        ]
      }
    },
    "EventDashmanagerLambdaPermissionEventsRuleSchedule1": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "EventDashmanagerLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "EventDashmanagerEventsRuleSchedule1",
            "Arn"
          ]
        }
      }
    },
    "AggregatorEventsRuleSchedule1": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": "rate(60 minutes)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "AggregatorLambdaFunction",
                "Arn"
              ]
            },
            "Id": "aggregatorSchedule"
          }
        ]
      }
    },
    "AggregatorLambdaPermissionEventsRuleSchedule1": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AggregatorLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "AggregatorEventsRuleSchedule1",
            "Arn"
          ]
        }
      }
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "dev-serverless-event"
      }
    },
    "ApiGatewayResourceLogger": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "logger",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodLoggerPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceLogger"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "ReceiverLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayDeployment1481806588050": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "dev"
      },
      "DependsOn": [
        "ApiGatewayMethodLoggerPost"
      ]
    },
    "ReceiverLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ReceiverLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "reporter": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": "serverless-event-dev-reporter",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": "sts:AssumeRole"
            }
          ]
        }
      }
    },
    "receiver": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": "serverless-event-dev-receiver",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": "sts:AssumeRole"
            }
          ]
        }
      }
    },
    "processor": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": "serverless-event-dev-processor",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": "sts:AssumeRole"
            }
          ]
        }
      }
    },
    "aggregator": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": "serverless-event-dev-aggregator",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": "sts:AssumeRole"
            }
          ]
        }
      }
    },
    "retriever": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": "serverless-event-dev-retriever",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": "sts:AssumeRole"
            }
          ]
        }
      }
    },
    "logging": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "serverless-event-logging",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Resource": "arn:aws:logs:eu-west-1:*:log-group:/aws/lambda/*:*:*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "s3:PutObject"
              ],
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:s3:::",
                    {
                      "Ref": "ServerlessDeploymentBucket"
                    }
                  ]
                ]
              }
            }
          ]
        },
        "Roles": [
          "serverless-event-dev-eu-west-1-lambdaRole",
          "serverless-event-dev-receiver",
          "serverless-event-dev-reporter",
          "serverless-event-dev-aggregator"
        ]
      }
    },
    "lambdaInvocation": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "serverless-event-invocation",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "lambda:InvokeFunction",
                "lambda:ListFunctions"
              ],
              "Resource": [
                "arn:aws:lambda:eu-west-1:*:function:serverless-event-dev-*"
              ]
            }
          ]
        },
        "Roles": [
          "serverless-event-dev-eu-west-1-lambdaRole",
          "serverless-event-dev-reporter"
        ]
      }
    },
    "s3reader": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "serverless-event-reader",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "s3:GetObject",
                "s3:ListAllMyBuckets"
              ],
              "Resource": [
                "arn:aws:s3:::*"
              ]
            }
          ]
        },
        "Roles": [
          "serverless-event-dev-eu-west-1-lambdaRole",
          "serverless-event-dev-receiver"
        ]
      }
    },
    "s3writer": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "serverless-event-writer",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "s3:PutObject",
                "s3:ListAllMyBuckets"
              ],
              "Resource": [
                "arn:aws:s3:::*"
              ]
            }
          ]
        },
        "Roles": [
          "serverless-event-dev-eu-west-1-lambdaRole",
          "serverless-event-dev-processor"
        ]
      }
    },
    "queueWorker": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "serverless-event-queue-worker",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "sqs:ReceiveMessage",
                "sqs:DeleteMessage",
                "sqs:DeleteMessageBatch"
              ],
              "Resource": [
                "arn:aws:sqs:*"
              ]
            }
          ]
        },
        "Roles": [
          "serverless-event-dev-eu-west-1-lambdaRole",
          "serverless-event-dev-reporter"
        ]
      }
    },
    "queuePublisher": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "serverless-event-queue-publisher",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "sqs:SendMessage",
                "sqs:SendMessageBatch",
                "sqs:SetQueueAttributes"
              ],
              "Resource": [
                "arn:aws:sqs:*"
              ]
            }
          ]
        },
        "Roles": [
          "serverless-event-dev-eu-west-1-lambdaRole",
          "serverless-event-dev-reporter"
        ]
      }
    },
    "queueMeta": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "serverless-event-queue-meta",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "sqs:GetQueueAttributes",
                "sqs:GetQueueUrl",
                "sqs:ListQueues"
              ],
              "Resource": [
                "arn:aws:sqs:*"
              ]
            }
          ]
        },
        "Roles": [
          "serverless-event-dev-eu-west-1-lambdaRole",
          "serverless-event-dev-reporter"
        ]
      }
    },
    "EventsBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": "serverless-event-dev"
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      }
    },
    "ReceiverLambdaFunctionArn": {
      "Description": "Lambda function info",
      "Value": {
        "Fn::GetAtt": [
          "ReceiverLambdaFunction",
          "Arn"
        ]
      }
    },
    "ReceiverLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ReceiverLambdaVersioniGNubuVlHKXOeskJRQbIw8wGJBgw60FC5XeBoFeyz0"
      }
    },
    "EventDashmanagerLambdaFunctionArn": {
      "Description": "Lambda function info",
      "Value": {
        "Fn::GetAtt": [
          "EventDashmanagerLambdaFunction",
          "Arn"
        ]
      }
    },
    "EventDashmanagerLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "EventDashmanagerLambdaVersioniGNubuVlHKXOeskJRQbIw8wGJBgw60FC5XeBoFeyz0"
      }
    },
    "ProcessorLambdaFunctionArn": {
      "Description": "Lambda function info",
      "Value": {
        "Fn::GetAtt": [
          "ProcessorLambdaFunction",
          "Arn"
        ]
      }
    },
    "ProcessorLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ProcessorLambdaVersioniGNubuVlHKXOeskJRQbIw8wGJBgw60FC5XeBoFeyz0"
      }
    },
    "AggregatorLambdaFunctionArn": {
      "Description": "Lambda function info",
      "Value": {
        "Fn::GetAtt": [
          "AggregatorLambdaFunction",
          "Arn"
        ]
      }
    },
    "AggregatorLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AggregatorLambdaVersioniGNubuVlHKXOeskJRQbIw8wGJBgw60FC5XeBoFeyz0"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.eu-west-1.amazonaws.com/dev"
          ]
        ]
      }
    }
  }
}